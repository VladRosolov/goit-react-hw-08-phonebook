{"version":3,"file":"static/js/426.2aec2d5e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Application/ContactForm/ContactForm.module.css?0294","components/Application/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/Application/ContactList/ContactList.module.css?0eb7","webpack://goit-react-hw-08-phonebook/./src/components/Application/ContactItem/ContactItem.module.css?732a","components/Application/ContactItem/ContactItem.js","components/Application/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/Application/Filter/Filter.module.css?53d4","components/Application/Filter/Filter.js","webpack://goit-react-hw-08-phonebook/./src/components/Application/Application.module.css?c363","components/Application/Application.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__pX6Wt\",\"contactform\":\"ContactForm_contactform__Shn1w\",\"contactform_title\":\"ContactForm_contactform_title__8whs9\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { addContact } from 'redux/contacts/contactsOperation';\nimport { nanoid } from 'nanoid';\n\nimport { Loader } from '../Loader/Loader';\nimport { toast } from 'react-toastify';\n\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { items, addingLoader } = useSelector(getContacts);\n\n  const contactAlreadyExists = (name, number) => {\n    return items.find(\n      item =>\n        item.name.toLocaleLowerCase() === name.toLocaleLowerCase() ||\n        item.number === number\n    );\n  };\n\n  const addContactToList = (id, name, number) => {\n    if (contactAlreadyExists(name, number)) {\n      return toast.error(`${name} ${number} is already in Phonebook`);\n    }\n\n    dispatch(addContact({ id, name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n\n    addContactToList(nanoid(), name, number);\n  };\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  return (\n    <form onSubmit={onFormSubmit} className={css.contactform}>\n      <h1 className={css.contactform_title}>Add contact to your Phonebook</h1>\n      <label htmlFor={nameId} className={css.contactform_label}>\n        Name\n      </label>\n      <input\n        id={nameId}\n        onChange={handleInputChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label htmlFor={numberId}>Number</label>\n      <input\n        id={numberId}\n        onChange={handleInputChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      {addingLoader ? (\n        <Loader />\n      ) : (\n        <button type=\"submit\" disabled={number && name ? false : true}>\n          Add contact\n        </button>\n      )}\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactlist\":\"ContactList_contactlist__4J4ld\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactItem_contact__f9iqC\",\"contact_item\":\"ContactItem_contact_item__QG7GK\",\"contact_name\":\"ContactItem_contact_name__STAYi\",\"contact_number\":\"ContactItem_contact_number__TbOTJ\",\"deleteButton\":\"ContactItem_deleteButton__emLr1\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperation';\nimport css from './ContactItem.module.css';\n\nconst ContactItem = ({ data }) => {\n  const dispatch = useDispatch();\n  const { id, name, number } = data;\n  const onDeleteClick = (e, id) => {\n    if (id === e.target.id) {\n      e.target.textContent = 'Deleting...';\n      e.target.setAttribute('disabled', 'true');\n    }\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <li className={css.contact}>\n      <div className={css.contact_item}>\n        <p className={css.contact_name}>{name}</p>\n        <p className={css.contact_number}>{number}</p>\n        {/* <p className={css.contact_item}>\n        {name}: {number}\n      </p> */}\n      </div>\n      <button\n        type=\"button\"\n        id={id}\n        onClick={e => onDeleteClick(e, id)}\n        className={css.deleteButton}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  data: PropTypes.objectOf(PropTypes.string.isRequired),\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperation';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { getFilter } from 'redux/contacts/filterSlice';\nimport css from './ContactList.module.css';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { Loader } from '../Loader/Loader';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const { items, error, isLoading } = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return items;\n    }\n\n    return items.filter(({ name }) =>\n      name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n    );\n  };\n\n  const contactsToRender = getFilteredContacts();\n\n  return (\n    <ul className={css.contactList}>\n      {isLoading ? (\n        <div>\n          <Loader />\n        </div>\n      ) : (\n        contactsToRender.map(item => <ContactItem key={item.id} data={item} />)\n      )}\n      {error && <div>Something went wrong, please, try again</div>}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter_input\":\"Filter_filter_input__FC11W\",\"filter_label\":\"Filter_filter_label__E8TNQ\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport css from './Filter.module.css';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(state => state.filter);\n\n  const onFilterChange = e => {\n    dispatch(setFilter(e.currentTarget.value.toLowerCase()));\n  };\n\n  const filterId = nanoid();\n\n  return (\n    <label htmlFor={filterId} className={css.filter_label}>\n      Find contacts by name:\n      <input\n        id={filterId}\n        onChange={onFilterChange}\n        value={filterValue}\n        type=\"text\"\n        name=\"filter\"\n        className={css.filter_input}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"Application_contacts__+bTZb\",\"container_path\":\"Application_container_path__1eLcV\",\"contactlist_title\":\"Application_contactlist_title__dRoql\",\"contactList\":\"Application_contactList__KHoSY\"};","import ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport css from './Application.module.css';\n\nconst Application = () => {\n  return (\n    <div className={css.contacts}>\n      <div className={css.container_path}>\n        <ContactForm />\n      </div>\n\n      {/* <h2>Contacts</h2> */}\n      <div className={css.container_path && css.contactList}>\n        <h1 className={css.contactlist_title}>Check your contacts</h1>\n        <Filter />\n        <ContactList />\n      </div>\n    </div>\n  );\n};\n\nexport default Application;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["useState","name","setName","number","setNumber","handleInputChange","e","target","value","dispatch","useDispatch","useSelector","getContacts","items","addingLoader","addContactToList","id","find","item","toLocaleLowerCase","contactAlreadyExists","toast","addContact","nameId","nanoid","numberId","onSubmit","preventDefault","className","css","htmlFor","onChange","type","pattern","title","required","Loader","disabled","data","onClick","textContent","setAttribute","deleteContact","onDeleteClick","useEffect","fetchContacts","error","isLoading","filter","getFilter","contactsToRender","includes","map","filterValue","state","filterId","setFilter","currentTarget","toLowerCase","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}