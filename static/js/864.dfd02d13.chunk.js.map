{"version":3,"file":"static/js/864.dfd02d13.chunk.js","mappings":"mQACA,EAA4B,6BAA5B,EAA2E,mC,SCmE3E,EA5DkB,WAChB,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,YACHN,EAASO,GACT,MACF,IAAK,eACHL,EAAYK,GACZ,MACF,QACEP,EAAS,IACTE,EAAY,IAEjB,EAEKM,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAQFG,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAE3C,OACE,kBAAME,SAVa,SAAAb,GACnBA,EAAEc,iBAEFV,GAASW,EAAAA,EAAAA,IAAU,CAAEpB,MAAOA,EAAOE,SAAUA,IAC9C,EAM+BmB,UAAWC,EAAzC,WACE,eAAID,UAAWC,EAAf,sBACA,kBAAOC,QAAST,EAAhB,oBACA,kBACEU,GAAIV,EACJW,KAAK,QACLlB,KAAK,YACLC,MAAOR,EACP0B,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,sBAEd,kBAAOL,QAASN,EAAhB,uBACA,kBACEO,GAAIP,EACJQ,KAAK,WACLlB,KAAK,eACLC,MAAON,EACPwB,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,wBAEZjB,GAAqD,SAACkB,EAAA,EAAD,KAAzC,mBAAQJ,KAAK,SAAb,uBAGnB,C,wDCjED,IAkBIT,EAAS,WAGX,IAH0B,IAAdc,EAAc,uDAAP,GACfN,EAAK,GACLO,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfN,GADEW,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOX,CACR,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Application/LoginForm/LoginForm.module.css?08f2","components/Application/LoginForm/LoginForm.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginform\":\"LoginForm_loginform__g84Go\",\"loginform_title\":\"LoginForm_loginform_title__IkfIi\"};","import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuthentication } from 'redux/auth/authSlice';\nimport { loginUser } from 'redux/auth/authOperation';\nimport { Loader } from '../Loader/Loader';\nimport css from './LoginForm.module.css';\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'userEmail':\n        setEmail(value);\n        break;\n      case 'userPassword':\n        setPassword(value);\n        break;\n      default:\n        setEmail('');\n        setPassword('');\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuthentication);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(loginUser({ email: email, password: password }));\n  };\n\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  return (\n    <form onSubmit={handleSubmit} className={css.loginform}>\n      <h1 className={css.loginform_title}>Sign in</h1>\n      <label htmlFor={emailId}>Email</label>\n      <input\n        id={emailId}\n        type=\"email\"\n        name=\"userEmail\"\n        value={email}\n        onChange={handleChange}\n        required\n        placeholder=\"Enter your Email\"\n      />\n      <label htmlFor={passwordId}>Password</label>\n      <input\n        id={passwordId}\n        type=\"password\"\n        name=\"userPassword\"\n        value={password}\n        onChange={handleChange}\n        required\n        placeholder=\"Enter your Password\"\n      />\n      {!isLoading ? <button type=\"submit\">Sign In</button> : <Loader />}\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["useState","email","setEmail","password","setPassword","handleChange","e","target","name","value","dispatch","useDispatch","isLoading","useSelector","getAuthentication","emailId","useMemo","nanoid","passwordId","onSubmit","preventDefault","loginUser","className","css","htmlFor","id","type","onChange","required","placeholder","Loader","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}